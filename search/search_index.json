{"config":{"lang":["en"],"prebuild_index":false,"separator":"[\\s\\-]+"},"docs":[{"location":"","text":"Aut\u00f3nomo Welcome Welcome to Aut\u00f3nomo's Documentation. Here are a list of shortucts: Deployment manual API Documentation Reports and Downloads Download the application OneDrive - Download for Android (*.apk) No login details required. Consult the Deployment Manual for more detailed instructions. Useful Pages Introducting Aut\u00f3nomo Our research Our design Our analysis","title":"Home"},{"location":"#autonomo","text":"","title":"Aut\u00f3nomo"},{"location":"#welcome","text":"Welcome to Aut\u00f3nomo's Documentation. Here are a list of shortucts: Deployment manual API Documentation Reports and Downloads","title":"Welcome"},{"location":"#download-the-application","text":"OneDrive - Download for Android (*.apk) No login details required. Consult the Deployment Manual for more detailed instructions.","title":"Download the application"},{"location":"#useful-pages","text":"Introducting Aut\u00f3nomo Our research Our design Our analysis","title":"Useful Pages"},{"location":"api/","text":"Overview Aut\u00f3nomo is built using: C# + Unity Game Engine Oculus API Our Unity assets: #067 Sportscar Realistic Mobile Car #06 Urban Construction Pack Ultimate Sci-Fi UI Bundle Our cloud services: Azure provided by UCL (for internal DevOps use)","title":"Overview"},{"location":"api/#overview","text":"Aut\u00f3nomo is built using: C# + Unity Game Engine Oculus API Our Unity assets: #067 Sportscar Realistic Mobile Car #06 Urban Construction Pack Ultimate Sci-Fi UI Bundle Our cloud services: Azure provided by UCL (for internal DevOps use)","title":"Overview"},{"location":"bugs/","text":"Hand Tracking NB : Hand Tracking is still an early feature of the latest v12 Quest software and therefore, may not be completely stable. Required fixes During System Testing , we observed that the user's hands may disappear from the VR environment if: Hands are folded and joined together Hands are moved rapidly in an up-and-down and/or sideways motion Hands are out of the range of the Oculus Quest Camera for an extended period of time Gesture Detection NB : Oculus' Gesture Recognition feature is a subset of its Hand Tracking feature and therefore, may not be completely stable. Required fixes During Integration Testing and System Testing , we discovered that the conditions for gesture recognition are more strict than what we previously thought. The following gestures may not be detected if: OK Gesture : The user's hand is not (roughly) perpendicular to the ground Swiping/Slapping Gesture : The user's hand is swiped rapidly and/or the user's hand is not held steadily. The latter is rarely observed; ~ 1 / 20 times. Climate Control System Gestures : The user performs a gesture(s) after a button for the Climate Control System has just (without a considerable pause) been pressed.","title":"Bugs and Required Fixes"},{"location":"bugs/#hand-tracking","text":"NB : Hand Tracking is still an early feature of the latest v12 Quest software and therefore, may not be completely stable.","title":"Hand Tracking"},{"location":"bugs/#required-fixes","text":"During System Testing , we observed that the user's hands may disappear from the VR environment if: Hands are folded and joined together Hands are moved rapidly in an up-and-down and/or sideways motion Hands are out of the range of the Oculus Quest Camera for an extended period of time","title":"Required fixes"},{"location":"bugs/#gesture-detection","text":"NB : Oculus' Gesture Recognition feature is a subset of its Hand Tracking feature and therefore, may not be completely stable.","title":"Gesture Detection"},{"location":"bugs/#required-fixes_1","text":"During Integration Testing and System Testing , we discovered that the conditions for gesture recognition are more strict than what we previously thought. The following gestures may not be detected if: OK Gesture : The user's hand is not (roughly) perpendicular to the ground Swiping/Slapping Gesture : The user's hand is swiped rapidly and/or the user's hand is not held steadily. The latter is rarely observed; ~ 1 / 20 times. Climate Control System Gestures : The user performs a gesture(s) after a button for the Climate Control System has just (without a considerable pause) been pressed.","title":"Required fixes"},{"location":"deployment-manual/","text":"Oculus Deployment Manual First Launch Download the application OneDrive - Download for Oculus (*.apk) Enable Developer Mode Put the headset in developer mode to be able to sideload to it. To do this, you have to be a Registered Developer . This process is free. Go to dashboard.oculus.com . Next, open the Oculus application on your smartphone or tablet. In the Settings tab, tap on the Headset and tap More Settings . In the list, you should now see Developer Mode . NB : If you don\u2019t see Developer Mode , try rebooting your phone and the Quest headset. Install Prerequisites You will need Oculus ADB Drivers to allow your PC to install apps on the standalone VR headset. Download the driver . When the download finishes, extract the .zip file into a folder. Now right-click on android_winusb.inf and click Install . Final Steps Make sure your headset is connected to your PC via USB. Using the Terminal (Unix) or Command Prompt (Windows), navigate to the folder you extracted the contents of the ADB download to. Example: $ cd ./ADB Enter the adb install -r command followed by the full path to the .apk file you downloaded in the first step. Example: $ adb install -r root/Downloads/VR_Self-Driving_Car.apk Launch When you put on your headset, you should see a new section in your Library called Unknown Sources . This will now contain the VR Self-Driving Car simulator.","title":"Deployment Manual"},{"location":"deployment-manual/#oculus-deployment-manual","text":"","title":"Oculus Deployment Manual"},{"location":"deployment-manual/#first-launch","text":"","title":"First Launch"},{"location":"deployment-manual/#download-the-application","text":"OneDrive - Download for Oculus (*.apk)","title":"Download the application"},{"location":"deployment-manual/#enable-developer-mode","text":"Put the headset in developer mode to be able to sideload to it. To do this, you have to be a Registered Developer . This process is free. Go to dashboard.oculus.com . Next, open the Oculus application on your smartphone or tablet. In the Settings tab, tap on the Headset and tap More Settings . In the list, you should now see Developer Mode . NB : If you don\u2019t see Developer Mode , try rebooting your phone and the Quest headset.","title":"Enable Developer Mode"},{"location":"deployment-manual/#install-prerequisites","text":"You will need Oculus ADB Drivers to allow your PC to install apps on the standalone VR headset. Download the driver . When the download finishes, extract the .zip file into a folder. Now right-click on android_winusb.inf and click Install .","title":"Install Prerequisites"},{"location":"deployment-manual/#final-steps","text":"Make sure your headset is connected to your PC via USB. Using the Terminal (Unix) or Command Prompt (Windows), navigate to the folder you extracted the contents of the ADB download to. Example: $ cd ./ADB Enter the adb install -r command followed by the full path to the .apk file you downloaded in the first step. Example: $ adb install -r root/Downloads/VR_Self-Driving_Car.apk","title":"Final Steps"},{"location":"deployment-manual/#launch","text":"When you put on your headset, you should see a new section in your Library called Unknown Sources . This will now contain the VR Self-Driving Car simulator.","title":"Launch"},{"location":"downloads/","text":"Bi-weekly reports To report and mark our progress and plan our priorities, we have been documenting our design and development process every two weeks. Term 1 (2019): Nov 22, Dec 5 Term 2 (2020): Jan 17, Feb 7, Feb 28, Mar 13, Mar 27 Downloads All reports Download the application OneDrive - Download for Android (*.apk) No login details required. Consult the Deployment Manual for more detailed instruction.","title":"Reports and Downloads"},{"location":"downloads/#bi-weekly-reports","text":"To report and mark our progress and plan our priorities, we have been documenting our design and development process every two weeks. Term 1 (2019): Nov 22, Dec 5 Term 2 (2020): Jan 17, Feb 7, Feb 28, Mar 13, Mar 27 Downloads All reports","title":"Bi-weekly reports"},{"location":"downloads/#download-the-application","text":"OneDrive - Download for Android (*.apk) No login details required. Consult the Deployment Manual for more detailed instruction.","title":"Download the application"},{"location":"system-architecture/","text":"","title":"System Architecture"},{"location":"testing/","text":"Testing Our testing environment(s) There are two different testing environments for our software - the Unity Editor and the Oculus Quest headset. Most of our unit and integration tests, however, were carried out on Unity Editor . There are a couple reasons for this decision: first, the process of loading the game onto the Quest headset is very time consuming. Secondly, the headset does not have an in-built Unity debugger , unlike the editor, so when an error occurs, one can not see the error message or any other details about the error, unless we display the message on a game object (like a Canvas). However, there were some tests that could only be carried out on the Quest headset. For example, to test whether the Hand Tracking feature or the Gesture Detection system was working correctly. Unit tests We used the in-built Unity test runner for our Unit tests or simply ran the game and checked for error messages. Unit tests, in the context of our project, refer to the testing of individual Unity prefabs (the Navigation Page prefab), scripts ( Navigator script, Traffic Light Control scripts), and methods ( Navigator.FindShortestRoute() method - our pathfinding algorithm, for example) Integration tests Integration tests refer to the testing and interaction/connections between game prefabs and some border functionality that requires the scripts to work together. We carried out integration tests by playing the game on Unity Editor as well as on the Oculus Quest headset to check if the system met our requirements. For example, when playing around the car interior UI, we found that when we jumped from the music canvas to the game canvas, the music stops, which was a bug in functionality. System tests System tests took place at the last stage of the development after our game passed all the unit and integration tests. We performed system tests on Oculus Quest only to make sure the overall user experience is delightful. Performance tests We performed performance testing on some of our features to check if there were any performance issues that could affect user experience - most of them were on the level of integration tests.","title":"Testing"},{"location":"testing/#testing","text":"","title":"Testing"},{"location":"testing/#our-testing-environments","text":"There are two different testing environments for our software - the Unity Editor and the Oculus Quest headset. Most of our unit and integration tests, however, were carried out on Unity Editor . There are a couple reasons for this decision: first, the process of loading the game onto the Quest headset is very time consuming. Secondly, the headset does not have an in-built Unity debugger , unlike the editor, so when an error occurs, one can not see the error message or any other details about the error, unless we display the message on a game object (like a Canvas). However, there were some tests that could only be carried out on the Quest headset. For example, to test whether the Hand Tracking feature or the Gesture Detection system was working correctly.","title":"Our testing environment(s)"},{"location":"testing/#unit-tests","text":"We used the in-built Unity test runner for our Unit tests or simply ran the game and checked for error messages. Unit tests, in the context of our project, refer to the testing of individual Unity prefabs (the Navigation Page prefab), scripts ( Navigator script, Traffic Light Control scripts), and methods ( Navigator.FindShortestRoute() method - our pathfinding algorithm, for example)","title":"Unit tests"},{"location":"testing/#integration-tests","text":"Integration tests refer to the testing and interaction/connections between game prefabs and some border functionality that requires the scripts to work together. We carried out integration tests by playing the game on Unity Editor as well as on the Oculus Quest headset to check if the system met our requirements. For example, when playing around the car interior UI, we found that when we jumped from the music canvas to the game canvas, the music stops, which was a bug in functionality.","title":"Integration tests"},{"location":"testing/#system-tests","text":"System tests took place at the last stage of the development after our game passed all the unit and integration tests. We performed system tests on Oculus Quest only to make sure the overall user experience is delightful.","title":"System tests"},{"location":"testing/#performance-tests","text":"We performed performance testing on some of our features to check if there were any performance issues that could affect user experience - most of them were on the level of integration tests.","title":"Performance tests"}]}